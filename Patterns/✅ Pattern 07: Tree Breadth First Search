This pattern is based on the Breadth First Search (BFS) technique to traverse a tree.

Any problem involving the traversal of a tree in a level-by-level order can be efficiently solved using this approach. We will use a Queue to keep track of all the nodes of a level before we jump onto the next level. This also means that the space complexity of the algorithm will be O(W), where W is the maximum number of nodes on any level.

**Tree Breadth-First Search (BFS)** is a traversal technique that explores all nodes in a tree level by level, starting from the root and visiting all nodes at each level before moving to the next. It's widely used in tree problems where you want to explore nodes layer by layer or need the shortest path in an unweighted graph or tree.

### What It Is:
In **Breadth-First Search (BFS)**, the algorithm visits the root node first, then explores its immediate children, then its children's children, and so on. In BFS, nodes at each level of the tree are explored before moving on to the nodes at the next level.

This traversal method is typically implemented using a queue, as it follows a First In, First Out (FIFO) approach.

### Where It Is Used:
BFS is commonly used in:
- Finding the shortest path in unweighted graphs.
- Traversing or searching trees or graphs layer by layer.
- Problems where you're asked to explore all nodes in order of their distance from the root (or another starting node).
- Applications in peer-to-peer networks, crawlers, and network broadcasting.
  
### How It Works:
1. **Start from the root node**.
2. Use a queue to keep track of the nodes at the current level.
3. Dequeue a node, process it, and enqueue all its child nodes.
4. Repeat the process for each node until the queue is empty.

### When It Is Used:
BFS is best suited for problems where you need to explore the tree/graph in a level-wise fashion. It can also be used when you need to find the shortest path in terms of the number of edges.

### Why It Is Important:
- **Shortest Path**: BFS guarantees finding the shortest path in an unweighted tree/graph.
- **Complete Exploration**: It systematically explores every node, ensuring that all nodes are covered.
- **Layer-wise Search**: BFS allows us to explore nodes at increasing distances from the root, making it ideal for problems that require traversing layers.

### Example

Let's take a binary tree as an example:

```
       1
      / \
     2   3
    / \ / \
   4  5 6  7
```

A BFS traversal would visit the nodes in this order: `1, 2, 3, 4, 5, 6, 7`.

### C++ Code for BFS on a Binary Tree:

```cpp
#include <iostream>
#include <queue>
using namespace std;

// Definition of a binary tree node
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// Function to perform BFS on a binary tree
void bfs(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    // Queue to store nodes for BFS traversal
    queue<TreeNode*> q;
    q.push(root);

    // While there are nodes to process
    while (!q.empty()) {
        // Get the current node
        TreeNode* current = q.front();
        q.pop();

        // Process the current node (in this case, print its value)
        cout << current->val << " ";

        // Add left and right children to the queue
        if (current->left) {
            q.push(current->left);
        }
        if (current->right) {
            q.push(current->right);
        }
    }
}

int main() {
    // Creating a binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    // Perform BFS traversal
    cout << "Breadth-First Search: ";
    bfs(root);
    cout << endl;

    return 0;
}
```

### Explanation:
1. **TreeNode Structure**: The `TreeNode` struct represents a node in the binary tree. It has an integer value (`val`), and pointers to its left and right child nodes.
2. **bfs Function**:
   - This function performs a level-order traversal using a queue.
   - It first pushes the root node into the queue.
   - Then, it enters a loop where it processes each node by dequeuing it, printing its value, and adding its children to the queue.
3. **Main Function**:
   - The `main()` function creates a simple binary tree and calls the `bfs()` function to print the values of nodes in BFS order.

### Output:
```
Breadth-First Search: 1 2 3 4 5 6 7 
```

### Time Complexity:
- **O(n)** where `n` is the number of nodes in the tree. Each node is visited once, and the algorithm processes every node and its children exactly once.

### Space Complexity:
- **O(n)** for the queue used to store nodes at each level of the tree. In the worst case, the queue might store half the nodes at the last level, which is proportional to `n`.

### Example Use Case:
A BFS traversal is useful in finding the shortest path from a root to any node in an unweighted tree, such as finding the shortest route in network packet routing, where every edge (or connection) has the same cost.

Would you like to explore more advanced BFS topics, such as handling graphs, or applying BFS in more complex scenarios?

Binary Tree Level Order Traversal (easy)
https://leetcode.com/problems/binary-tree-level-order-traversal/

Given a binary tree, populate an array to represent its level-by-level traversal. You should populate the values of all nodes of each level from left to right in separate sub-arrays.

Since we need to traverse all nodes of each level before moving onto the next level, we can use the Breadth First Search (BFS) technique to solve this problem.

We can use a Queue to efficiently traverse in BFS fashion. Here are the steps of our algorithm:

Start by pushing the root node to the queue.
Keep iterating until the queue is empty.
In each iteration, first count the elements in the queue (letâ€™s call it levelSize). We will have these many nodes in the current level.
Next, remove levelSize nodes from the queue and push their value in an array to represent the current level.
After removing each node from the queue, insert both of its children into the queue.
If the queue is not empty, repeat from step 3 for the next level.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root==NULL) return {};
        queue<TreeNode*>q;
        q.push(root);
        vector<vector<int>>v;
        while(!q.empty())
        {
            vector<int>temp;
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode* top=q.front();
                q.pop();
                temp.push_back(top->val);
                if(top->left)q.push(top->left);
                if(top->right)q.push(top->right);

            }
            v.push_back(temp);
        }
        return v;
    }
};

Reverse Level Order Traversal (easy)
https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

Given a binary tree, populate an array to represent its level-by-level traversal in reverse order, i.e., the lowest level comes first. You should populate the values of all nodes in each level from left to right in separate sub-arrays.

This problem follows the Binary Tree Level Order Traversal pattern. We can follow the same BFS approach. The only difference will be that instead of appending the current level at the end, we will append the current level at the beginning of the result list.

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(root==NULL) return {};
        queue<TreeNode*>q;
        q.push(root);
        vector<vector<int>>v;
        while(!q.empty())
        {
            vector<int>temp;
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode* top=q.front();
                q.pop();
                temp.push_back(top->val);
                if(top->left)q.push(top->left);
                if(top->right)q.push(top->right);

            }
            v.push_back(temp);
        }
        reverse(v.begin(),v.end());
        return v;
    }
};
The time complexity of the above algorithm is O(N), where N is the total number of nodes in the tree. This is due to the fact that we traverse each node once.
The space complexity of the above algorithm will be O(N) as we need to return a list containing the level order traversal. We will also need O(N) space for the queue. Since we can have a maximum of N/2 nodes at any level (this could happen only at the lowest level), therefore we will need O(N) space to store them in the queue.

ðŸŒ´ Zigzag Traversal (medium)
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

Level Averages in a Binary Tree (easy)
https://leetcode.com/problems/average-of-levels-in-binary-tree/

Level Maximum in a Binary Tree
https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/

Minimum Depth of a Binary Tree (easy)
https://leetcode.com/problems/minimum-depth-of-binary-tree/

Maximum Depth of a Binary Tree
https://leetcode.com/problems/maximum-depth-of-binary-tree/

ðŸ˜• Connect Level Order Siblings (medium)
https://leetcode.com/problems/populating-next-right-pointers-in-each-node/

ðŸŒŸ Right View of a Binary Tree (easy)
https://leetcode.com/problems/binary-tree-right-side-view/
